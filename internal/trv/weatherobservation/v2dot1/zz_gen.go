// Package v2dot1 contains the type definitions for WeatherObservation v2.1.
package v2dot1

import (
	"time"
)

// THIS FILE IS AUTOMATICALLY GENERATED FROM THE XSD. DO NOT EDIT.

type WeatherObservation struct {
	// SV: Tidpunkt som observationen avser, inklusive tidzon för att hantera sommartid och normaltid.
	// EN: The time to which the observation relates, including the time zone to deal with daylight saving time and standard time.
	Sample              *time.Time           `xml:"Sample,omitempty"`
	Weather             *Weather             `xml:"Weather,omitempty"`
	Surface             *SurfaceCondition    `xml:"Surface,omitempty"`
	Air                 *AirCondition        `xml:"Air,omitempty"`
	Wind                []WindCondition      `xml:"Wind,omitempty"`
	DeicingChemical     *DeicingChemical     `xml:"DeicingChemical,omitempty"`
	Subsurface          *SubsurfaceCondition `xml:"Subsurface,omitempty"`
	Aggregated5minutes  *Aggregated          `xml:"Aggregated5minutes,omitempty"`
	Aggregated10minutes *Aggregated          `xml:"Aggregated10minutes,omitempty"`
	Aggregated30minutes *Aggregated          `xml:"Aggregated30minutes,omitempty"`
	// SV: Unik publiceringsidentitet för observationen.
	// EN: Unique publication identity for the observation.
	Id           *string   `xml:"Id,omitempty"`
	Measurepoint *Location `xml:"Measurepoint,omitempty"`
	// EN: Specifies if the object is deleted.
	// SV: Anger om objektet är raderat.
	Deleted *bool `xml:"Deleted,omitempty"`
	// EN: Specifies when the object is stored.
	// SV: Anger när objektet är sparat.
	ModifiedTime *time.Time `xml:"ModifiedTime,omitempty"`
}

type Location struct {
	// SV: Unik identitet för en mätpunkt
	// EN: Unique identity of a measurement point
	Id *int `xml:"Id,omitempty"`
	// SV: Mätpunktens namn
	// EN: Name of the measuring point
	Name     *string   `xml:"Name,omitempty"`
	Geometry *Geometry `xml:"Geometry,omitempty"`
}

type Weather struct {
	// SV: Vilken typ av nederbörd som detekterats.
	// EN: The type of precipitation detected.
	Precipitation *string `xml:"Precipitation,omitempty"`
}

type SurfaceCondition struct {
	// SV: Vägytans temperatur. Value [C]
	// EN: The temperature of the road surface. Value [C]
	Temperature *Celsius `xml:"Temperature,omitempty"`
	// SV: Förekomst av vatten på vägytan.
	// EN: Presence of water on the road surface.
	Water *bool `xml:"Water,omitempty"`
	// SV: Förekomst av is på vägytan.
	// EN: Presence of ice on the road surface.
	Ice *bool `xml:"Ice,omitempty"`
	// SV: Förekomst av snö på vägytan.
	// EN: Presence of snow on the road surface.
	Snow *bool `xml:"Snow,omitempty"`
	// SV: Value [0-1]
	// EN: Value [0-1]
	Grip *Grip `xml:"Grip,omitempty"`
	// SV: Vattendjup på vägytan. Value [mm]
	// EN: Water depth on the road surface. Value [mm]
	WaterDepth *Millimeters `xml:"WaterDepth,omitempty"`
	// SV: Isdjup på vägytan. Value [mm]
	// EN: Ice depth on the road surface. Value [mm]
	IceDepth *Millimeters `xml:"IceDepth,omitempty"`
	// SV: Snödjup på vägytan.
	// EN: Snow depth on the road surface.
	SnowDepth *Snow `xml:"SnowDepth,omitempty"`
}

type AirCondition struct {
	// SV: Lufttemperatur. Value [C]
	// EN: Air temperature. Value [C]
	Temperature *Celsius `xml:"Temperature,omitempty"`
	// SV: Daggpunkt, den temperatur där vatten kondenserar. Value [C]
	// EN: Dew point, the temperature at which water condenses. Value [C]
	Dewpoint *Celsius `xml:"Dewpoint,omitempty"`
	// SV: Relativ luftfuktighet. Andel av den fukt som luften kan bära. Vid 100% är luften mättad. Value [%]
	// EN: Relative humidity. Proportion of the moisture that the air can carry. At 100%, the air is saturated. Value [%]
	RelativeHumidity *Percentage `xml:"RelativeHumidity,omitempty"`
	// SV: Den sträcka det finns sikt. Value [m] OBS! Ej kvalitetssäkrad.
	// EN: The distance there is visibility. Value [m] Please note, quality not verified.
	VisibleDistance *Meters `xml:"VisibleDistance,omitempty"`
}

type WindCondition struct {
	Height *int `xml:"Height,omitempty"`
	// SV: Mått på vindhastighet vid en viss tidpunkt. Medelvärde över tiominutersperiod t.o.m. tidpunkten. Value [m/s]
	// EN: Measure of wind speed at a specific point in time. Average over a ten-minute period up to and including the time period. Value [m/s]
	Speed *MetersPerSecond `xml:"Speed,omitempty"`
	// SV: Mått på vindriktning vid en viss tidpunkt. Medelvärde över tiominutersperiod t.o.m. tidpunkten. Value [grader]
	// EN: Measure of wind direction at a given point in time. Average over a ten-minute period up to and including the time period. Value [degrees]
	Direction *Degrees `xml:"Direction,omitempty"`
}

type DeicingChemical struct {
	// SV: Mängd salt vid mätpunkten. Value [g/kvm]
	// EN: Amount of salt at the measuring point. Value [g/sqm]
	Amount *GramPerSquareMeter `xml:"Amount,omitempty"`
}

type SubsurfaceCondition struct {
	Ground []GroundCondition `xml:"Ground,omitempty"`
}

type Geometry struct {
	// SV: Geometrisk punkt i koordinatsystem SWEREF99TM
	// EN: Geometric point in coordinate system SWEREF99TM
	SWEREF99TM *string `xml:"SWEREF99TM,omitempty"`
	// SV: Geometrisk punkt i koordinatsystem WGS84
	// EN: Geometric point in coordinate system WGS84
	WGS84 *string `xml:"WGS84,omitempty"`
}

type Celsius struct {
	// SV: Mätvärdets ursprung
	// EN: Origin of the metric
	Origin *string `xml:"Origin,omitempty"`
	// SV: Sensorernas beteckning
	// EN: Designation of the sensors
	SensorNames *string  `xml:"SensorNames,omitempty"`
	Value       *float64 `xml:"Value,omitempty"`
}

type Grip struct {
	// SV: Mätvärdets ursprung
	// EN: Origin of the metric
	Origin *string `xml:"Origin,omitempty"`
	// SV: Sensorernas beteckning
	// EN: Designation of the sensors
	SensorNames *string  `xml:"SensorNames,omitempty"`
	Value       *float64 `xml:"Value,omitempty"`
}

type Millimeters struct {
	// SV: Mätvärdets ursprung
	// EN: Origin of the metric
	Origin *string `xml:"Origin,omitempty"`
	// SV: Sensorernas beteckning
	// EN: Designation of the sensors
	SensorNames *string  `xml:"SensorNames,omitempty"`
	Value       *float64 `xml:"Value,omitempty"`
}

type Snow struct {
	// SV: Mängd snö. Value [mm]
	// EN: Amount of snow. Value [mm]
	Solid *Millimeters `xml:"Solid,omitempty"`
	// SV: Mängd vatten som snön motsvarar i smält form. Value [mm]
	// EN: Amount of water that the snow corresponds to in melted form. Value [mm]
	WaterEquivalent *Millimeters `xml:"WaterEquivalent,omitempty"`
}

type Percentage struct {
	// SV: Mätvärdets ursprung
	// EN: Origin of the metric
	Origin *string `xml:"Origin,omitempty"`
	// SV: Sensorernas beteckning
	// EN: Designation of the sensors
	SensorNames *string  `xml:"SensorNames,omitempty"`
	Value       *float64 `xml:"Value,omitempty"`
}

type Meters struct {
	// SV: Mätvärdets ursprung
	// EN: Origin of the metric
	Origin *string `xml:"Origin,omitempty"`
	// SV: Sensorernas beteckning
	// EN: Designation of the sensors
	SensorNames *string  `xml:"SensorNames,omitempty"`
	Value       *float64 `xml:"Value,omitempty"`
}

type MetersPerSecond struct {
	// SV: Mätvärdets ursprung
	// EN: Origin of the metric
	Origin *string `xml:"Origin,omitempty"`
	// SV: Sensorernas beteckning
	// EN: Designation of the sensors
	SensorNames *string  `xml:"SensorNames,omitempty"`
	Value       *float64 `xml:"Value,omitempty"`
}

type Degrees struct {
	// SV: Mätvärdets ursprung
	// EN: Origin of the metric
	Origin *string `xml:"Origin,omitempty"`
	// SV: Sensorernas beteckning
	// EN: Designation of the sensors
	SensorNames *string `xml:"SensorNames,omitempty"`
	Value       *int    `xml:"Value,omitempty"`
}

type GramPerSquareMeter struct {
	// SV: Mätvärdets ursprung
	// EN: Origin of the metric
	Origin *string `xml:"Origin,omitempty"`
	// SV: Sensorernas beteckning
	// EN: Designation of the sensors
	SensorNames *string  `xml:"SensorNames,omitempty"`
	Value       *float64 `xml:"Value,omitempty"`
}

type GroundCondition struct {
	// SV: Det djup som observationen avser och är negativt för att återspegla att det avser under markytan. Value [cm]
	// EN: The depth to which the observation refers and is negative to reflect that it refers to below the surface of the ground. Value [cm]
	Depth *IntegerCentimeters `xml:"Depth,omitempty"`
	// SV: Temperatur (grader celsius) vid ett visst djup i marken. Value [C]
	// EN: Temperature (degrees celsius) at a certain depth in the ground. Value [C]
	Temperature *Celsius `xml:"Temperature,omitempty"`
}

type Aggregated struct {
	Wind          *WindConditionAggregated          `xml:"Wind,omitempty"`
	Precipitation *PrecipitationConditionAggregated `xml:"Precipitation,omitempty"`
}

type IntegerCentimeters struct {
	// SV: Mätvärdets ursprung
	// EN: Origin of the metric
	Origin *string `xml:"Origin,omitempty"`
	// SV: Sensorernas beteckning
	// EN: Designation of the sensors
	SensorNames *string `xml:"SensorNames,omitempty"`
	Value       *int    `xml:"Value,omitempty"`
}

type WindConditionAggregated struct {
	Height *int `xml:"Height,omitempty"`
	// SV: Högst uppmätt 3-sekundersmedelvärde under perioden. Value [m/s]
	// EN: Highest measured 3-second average over the period. Value [m/s]
	SpeedMax *MetersPerSecond `xml:"SpeedMax,omitempty"`
	// SV: Value [m/s]
	// EN: Value [m/s]
	SpeedAverage *MetersPerSecond `xml:"SpeedAverage,omitempty"`
}

type PrecipitationConditionAggregated struct {
	// SV: Förekomst av regn.
	// EN: Presence of rain.
	Rain *bool `xml:"Rain,omitempty"`
	// SV: Förekomst av snö.
	// EN: Presence of snow.
	Snow *bool `xml:"Snow,omitempty"`
	// SV: Mängd regn under perioden. Value [mm]
	// EN: Amount of rain during the period. Value [mm]
	RainSum *Millimeters `xml:"RainSum,omitempty"`
	// SV: Mängd snö under perioden.
	// EN: Amount of snow during the period.
	SnowSum *Snow `xml:"SnowSum,omitempty"`
	// SV: Mängd vatten som nederbörden under perioden motsvarar. Value [mm]
	// EN: Amount of water to which the precipitation during the period corresponds. Value [mm]
	TotalWaterEquivalent *Millimeters `xml:"TotalWaterEquivalent,omitempty"`
}
