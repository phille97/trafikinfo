// Package v1dot9 contains the type definitions for TrainAnnouncement v1.9.
package v1dot9

import (
	"time"
)

// THIS FILE IS AUTOMATICALLY GENERATED FROM THE XSD. DO NOT EDIT.

type TrainAnnouncement struct {
	// SV: Aktivitetens unika id
	ActivityId *string `xml:"ActivityId,omitempty"`
	// SV: "Ankomst" eller "Avgang"
	ActivityType *string `xml:"ActivityType,omitempty"`
	// SV: Anger om ankomsten/avgången annonseras i tidtabell
	Advertised *bool `xml:"Advertised,omitempty"`
	// SV: Tidtabellstid
	AdvertisedTimeAtLocation *time.Time `xml:"AdvertisedTimeAtLocation,omitempty"`
	// SV: Annonserat tågnummer (tågnumret som står på biljetten)
	AdvertisedTrainIdent *string `xml:"AdvertisedTrainIdent,omitempty"`
	// SV: Kod för bokningsinformation och bokningsinformation, ex: "Vagn 4 obokad
	Booking []Booking `xml:"Booking,omitempty"`
	// SV: Anger om ankomsten/avgången är inställd
	Canceled *bool `xml:"Canceled,omitempty"`
	// SV: Anger att dataposten raderats
	Deleted *bool `xml:"Deleted,omitempty"`
	// SV: Utgångsdatum för det Operativa tågnumret.
	DepartureDateOTN *time.Time `xml:"DepartureDateOTN,omitempty"`
	// SV: Eventuell avvikelse med full orsakskod, ex: ABC023 och beskrivning, ex: "Buss ersätter", "Spårändrat", "Kort tåg", "Ej servering" o.s.v.
	Deviation []Deviation `xml:"Deviation,omitempty"`
	// SV: Tidpunkt för beräknad ankomst eller avgång
	EstimatedTimeAtLocation *time.Time `xml:"EstimatedTimeAtLocation,omitempty"`
	// SV: Anger om en beräknad tid är preliminär. Notera att om den beräknade tiden är preliminär så innebär det att den kan ändras både framåt och bakåt, ett tåg kan alltså t.ex avgå tidigare än beräknad tidpunkt om den också är markerad som preliminär.
	EstimatedTimeIsPreliminary *bool `xml:"EstimatedTimeIsPreliminary,omitempty"`
	// SV: Från station för tåget med ordning och i vilken prioritet som ska visas. Notera att det avser vad som ska annonseras för resenärerna, det vill säga vad som ska visas på skyltar o.dyl. FromLocation kan med andra ord ha olika innehåll för samma tåg vid olika stationer och olika innehåll vad ankomster respektive avgångar. Fältet anger hur från-stationer ska annonseras.
	FromLocation []FromLocation `xml:"FromLocation,omitempty"`
	// SV: Namnet på trafikinformationsägaren
	InformationOwner *string `xml:"InformationOwner,omitempty"`
	// SV: Det operativa tågets ankomst- eller avgångstid enligt tidtabell (kan skilja sig från den annonserade tiden).
	LocationDateTimeOTN *time.Time `xml:"LocationDateTimeOTN,omitempty"`
	// SV: Signatur för stationen
	LocationSignature *string `xml:"LocationSignature,omitempty"`
	// SV: Url till trafikägarens mobila hemsida
	MobileWebLink *string `xml:"MobileWebLink,omitempty"`
	// SV: Tidpunkt då dataposten ändrades
	ModifiedTime *time.Time `xml:"ModifiedTime,omitempty"`
	// SV: Anger i vilken ordning tåget nyutrustats. Om ingen nyutrustning skett kommer värdet vara noll
	NewEquipment *int `xml:"NewEquipment,omitempty"`
	// SV: Det järnvägsföretag som utför järnvägstrafik, alltså kör tåget, för en trafikorganisatör.
	Operator *string `xml:"Operator,omitempty"`
	// SV: Operativt tågnummer (OTN).
	OperationalTrainNumber *string `xml:"OperationalTrainNumber,omitempty"`
	// SV: Identifierare i TAF/TAP format.
	// EN: Identifiers in TAF/TAP format.
	OperationalTransportIdentifiers []CompositIdentifierOperationalType `xml:"OperationalTransportIdentifiers,omitempty"`
	// SV: Kod för övrig annonseringsinformation och övrig annonseringsinformation, ex. "Trevlig resa!", "Bakre fordon går låst!", "Ingen påstigning"
	OtherInformation []OtherInformation `xml:"OtherInformation,omitempty"`
	// SV: Anger en planerad försening och dess giltighet anges med PlannedEstimatedTimeAtLocationIsValid-flaggan
	PlannedEstimatedTimeAtLocation *time.Time `xml:"PlannedEstimatedTimeAtLocation,omitempty"`
	// SV: Anger om PlaneradBeraknadTid är giltig. Kommer sättas till false när en operativ beräknad tidrapport, tidrapport eller slopningsrapport skapas
	PlannedEstimatedTimeAtLocationIsValid *bool `xml:"PlannedEstimatedTimeAtLocationIsValid,omitempty"`
	// SV: Kod för beskrivning av tåget och beskrivning av tåget, ex. "Tågkompaniet", "SJ InterCity", "TiB/Tågkomp"
	ProductInformation []ProductInformation `xml:"ProductInformation,omitempty"`
	// SV: Tågets annonserade avgångsdatum
	ScheduledDepartureDateTime *time.Time `xml:"ScheduledDepartureDateTime,omitempty"`
	// SV: Servicekod och lite extra utöver produktinformation, ex "Bistro", "Sov-och liggv"
	Service []Service `xml:"Service,omitempty"`
	// SV: När tåget har ankommit eller avgått
	TimeAtLocation *time.Time `xml:"TimeAtLocation,omitempty"`
	// SV: När tåget har ankommit eller avgått, med sekunder
	TimeAtLocationWithSeconds *time.Time `xml:"TimeAtLocationWithSeconds,omitempty"`
	// SV: Till station för tåget med ordning och i vilken prioritet som ska visas. Notera att det avser vad som ska annonseras för resenärerna, det vill säga vad som ska visas på skyltar o.dyl. ToLocation kan med andra ord ha olika innehåll för samma tåg vid olika stationer och olika innehåll vad ankomster respektive avgångar. Fältet anger hur till-stationer ska annonseras.
	ToLocation []ToLocation `xml:"ToLocation,omitempty"`
	// SV: Spår
	TrackAtLocation *string `xml:"TrackAtLocation,omitempty"`
	// SV: Kod för tågsammansättning och tågsammansättning, ex: "Vagnsordning 7, 6, 5, 4, 2, 1"
	TrainComposition []TrainComposition `xml:"TrainComposition,omitempty"`
	// SV: Ägaren av det aktuella tågläget
	TrainOwner *string `xml:"TrainOwner,omitempty"`
	// SV: Trafiktypen, ex. "Buss", "Pendeltåg", "Taxi", "Tåg".
	TypeOfTraffic   []TypeOfTraffic   `xml:"TypeOfTraffic,omitempty"`
	ViaFromLocation []ViaFromLocation `xml:"ViaFromLocation,omitempty"`
	ViaToLocation   []ViaToLocation   `xml:"ViaToLocation,omitempty"`
	// SV: Url till trafikägarens hemsida
	WebLink *string `xml:"WebLink,omitempty"`
	// SV: Namn på trafikinfoägaren att använda i länkar
	WebLinkName *string `xml:"WebLinkName,omitempty"`
}

type Booking struct {
	// SV: Kod för bokningsinformation
	Code *string `xml:"Code,omitempty"`
	// SV: Text som ger bokningsinformation, ex: "Vagn 4 obokad", "Platsbiljett krävs"
	Description *string `xml:"Description,omitempty"`
}

type Deviation struct {
	// SV: Kod för avvikelse
	Code *string `xml:"Code,omitempty"`
	// SV: Text som beskriver avvikelse, ex: "Buss ersätter", "Spårändrat", "Kort tåg", "Ej servering", "Oväder"
	Description *string `xml:"Description,omitempty"`
}

type FromLocation struct {
	// SV: Namn på frånstation. Notera att det avser vad som ska annonseras för resenärerna, det vill säga vad som ska visas på skyltar o.dyl. FromLocation kan med andra ord ha olika innehåll för samma tåg vid olika stationer och olika innehåll vad ankomster respektive avgångar. Fältet anger hur från-stationer ska annonseras.
	LocationName *string `xml:"LocationName,omitempty"`
	// SV: Prioritet för vilka stationer som ska visas.
	Priority *int `xml:"Priority,omitempty"`
	// SV: Vilken ordning stationer ska visas.
	Order *int `xml:"Order,omitempty"`
}

type CompositIdentifierOperationalType struct {
	// SV: Ger möjlighet att beskriva olika objekt inför en ansökan, TR = Train, PA = Path, CR = Case Reference, PR = Path Request
	// EN: Provides a possibility for differentiantion between the objects: Train, Path, Case Reference and Path Request
	ObjectType *string `xml:"ObjectType,omitempty"`
	// SV: Företagskod UIC för den som utfärdat identiteten
	// EN: Identifies the RU, IM or other company involved in the Rail Transport Chain
	Company *string `xml:"Company,omitempty"`
	// SV: Huvuddelen av identifieraren.
	// EN: It is the main part of identifier and is determent by the company that creates it.
	Core *string `xml:"Core,omitempty"`
	// SV: Varianten visar relationen mellan två id'n som refererar samma affärsobjekt
	// EN: The variant shows a relationship between two identifiers referring to the same business case
	Variant *string `xml:"Variant,omitempty"`
	// SV: Refererar till tågplan där behovet ska exekveras
	// EN: Refers to the timetable period in which the business will be carried out
	TimetableYear *int64 `xml:"TimetableYear,omitempty"`
	// SV: Starten då behovet exekveras
	// EN: The start of the date/time in effect
	StartDate *time.Time `xml:"StartDate,omitempty"`
}

type OtherInformation struct {
	// SV: Kod för övrig annonseringsinformation
	Code *string `xml:"Code,omitempty"`
	// SV: Text som ger övrig annonseringinformation, ex. "Trevlig resa!", "Bakre vagnen låst!", "Ingen påstigning"
	Description *string `xml:"Description,omitempty"`
}

type ProductInformation struct {
	// SV: Kod för produkten
	Code *string `xml:"Code,omitempty"`
	// SV: Text som beskriver produkten, ex. "Västtågen", "SJ Snabbtåg", "Pågatågen"
	Description *string `xml:"Description,omitempty"`
}

type Service struct {
	// SV: Kod för service
	Code *string `xml:"Code,omitempty"`
	// SV: Text som beskriver den service som finns, ex "Bistro", "Sov-och liggvagnar", "Kiosk"
	Description *string `xml:"Description,omitempty"`
}

type ToLocation struct {
	// SV: Tillstation för tåget. Notera att det avser vad som ska annonseras för resenärerna, det vill säga vad som ska visas på skyltar o.dyl. ToLocation kan med andra ord ha olika innehåll för samma tåg vid olika stationer och olika innehåll vad ankomster respektive avgångar. Fältet anger hur till-stationer ska annonseras.
	LocationName *string `xml:"LocationName,omitempty"`
	// SV: Prioritet för vilka stationer som ska visas.
	Priority *int `xml:"Priority,omitempty"`
	// SV: Vilken ordning stationer ska visas.
	Order *int `xml:"Order,omitempty"`
}

type TrainComposition struct {
	// SV: Kod för tågsammansättning
	Code *string `xml:"Code,omitempty"`
	// SV: Text som beskriver tågsammansättning, ex: "Vagnsordning 7, 6, 5, 4, 2, 1"
	Description *string `xml:"Description,omitempty"`
}

type TypeOfTraffic struct {
	// SV: Kod för trafiktyp
	Code *string `xml:"Code,omitempty"`
	// SV: Trafiktypen, ex. "Buss", "Pendeltåg", "Taxi", "Tåg".
	Description *string `xml:"Description,omitempty"`
}

type ViaFromLocation struct {
	// SV: Namn på via frånstation. Notera att det avser vad som ska annonseras för resenärerna, det vill säga vad som ska visas på skyltar o.dyl. ViaFromLocation kan med andra ord ha olika innehåll för samma tåg vid olika stationer och olika innehåll vad ankomster respektive avgångar. Fältet anger hur från-stationer ska annonseras.
	LocationName *string `xml:"LocationName,omitempty"`
	// SV: Prioritet för vilka stationer som ska visas.
	Priority *int `xml:"Priority,omitempty"`
	// SV: Vilken ordning stationer ska visas.
	Order *int `xml:"Order,omitempty"`
}

type ViaToLocation struct {
	// SV: Namn på vi. Notera att det avser vad som ska annonseras för resenärerna, det vill säga vad som ska visas på skyltar o.dyl. ViaToLocation kan med andra ord ha olika innehåll för samma tåg vid olika stationer och olika innehåll vad ankomster respektive avgångar. Fältet anger hur till-stationer ska annonseras.
	LocationName *string `xml:"LocationName,omitempty"`
	// SV: Prioritet för vilka stationer som ska visas.
	Priority *int `xml:"Priority,omitempty"`
	// SV: Vilken ordning stationer ska visas.
	Order *int `xml:"Order,omitempty"`
}
