// Package v1 contains the type definitions for MeasurementData20 v1.
//
// All types have accessor methods to access fields which can be chained on nils.
// This makes it possible to easily drill down into deeply nested data.
package v1

import (
	"encoding/xml"
	"strings"
	"time"

	schema "github.com/phille97/trafikinfo/internal/trv/measurementdata20/v1"
	"github.com/phille97/trafikinfo/trv"
)

// THIS FILE IS AUTOMATICALLY GENERATED FROM THE XSD. DO NOT EDIT.

func T() trv.ObjectType {
	return trv.ObjectType{
		Kind:      "MeasurementData20",
		Version:   "1",
		Namespace: "",
	}
}

type MeasurementData20 struct {
	data *schema.MeasurementData20
}

func (x *MeasurementData20) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.MeasurementData20{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Län.
func (x *MeasurementData20) County() *int {
	if x.data == nil {
		return nil
	}
	return x.data.County
}

// SV: Huvudvägnummer.
func (x *MeasurementData20) RoadMainNumber() *int {
	if x.data == nil {
		return nil
	}
	return x.data.RoadMainNumber
}

// SV: Undervägnummer. Kallas ibland även punktväg. Måste användas ihop med huvudvägnumret.
func (x *MeasurementData20) RoadSubNumber() *int {
	if x.data == nil {
		return nil
	}
	return x.data.RoadSubNumber
}

func (x *MeasurementData20) Direction() *Direction {
	if x.data == nil {
		return &Direction{}
	}
	return &Direction{data: x.data.Direction}
}

// SV: Körfält. Räknas från höger sida och startar med körfält 10. Nästa är 20 och kan gå upp till 50.
func (x *MeasurementData20) Lane() *int {
	if x.data == nil {
		return nil
	}
	return x.data.Lane
}

// SV: Start löpande längd. Anges i meter. Starten för aktuell data angivet i antal meter från vägnumrets start inom det länet, i aktuell riktning.
func (x *MeasurementData20) StartContinuousLength() *int {
	if x.data == nil {
		return nil
	}
	return x.data.StartContinuousLength
}

// SV: Slut löpande längd. Anges i meter. Slutet för aktuell data angivet i antal meter från vägnumrets start inom det länet, i aktuell riktning.
func (x *MeasurementData20) EndContinuousLength() *int {
	if x.data == nil {
		return nil
	}
	return x.data.EndContinuousLength
}

// SV: Längd i antal meter.
func (x *MeasurementData20) Length() *int {
	if x.data == nil {
		return nil
	}
	return x.data.Length
}

// SV: Mätdatum. Ett gemensamt datum för en hel mätperiod. Är detta datum som visas i graferna i PMSV3 Analysera sträcka.
func (x *MeasurementData20) MeasurementDate() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.MeasurementDate
}

// SV: Mätdatum exakt. Det exakta mätdatumet för aktuellt mätdata.
func (x *MeasurementData20) MeasurementDateSpecific() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.MeasurementDateSpecific
}

func (x *MeasurementData20) MeasurementDataType() *MeasurementDataType {
	if x.data == nil {
		return &MeasurementDataType{}
	}
	return &MeasurementDataType{data: x.data.MeasurementDataType}
}

// SV: IRI vänster. Enhet mm/m. IRI (International Roughness Index) Beräknat mått baserat på uppmätt längsprofil i vänster hjulspår. Avser jämnhet i längsled.
func (x *MeasurementData20) IRILeft() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.IRILeft
}

// SV: IRI höger. Enhet mm/m. IRI (International Roughness Index) Beräknat mått baserat på uppmätt längsprofil i höger hjulspår. Avser jämnhet i längsled.
func (x *MeasurementData20) IRIRight() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.IRIRight
}

// SV: Mätbilens hastighet.
func (x *MeasurementData20) MeasurementVehicleSpeed() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.MeasurementVehicleSpeed
}

// SV: Backighet. Anges i %. Backighet är medellutningen för 20m väg i mätriktningen. Uppför har positivt tecken och utför negativt.
func (x *MeasurementData20) Hilliness() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.Hilliness
}

// SV: Kurvatur. Enhet 2000/r. Kurvatur beskriver medelvärdet av krökningsradien (r) över 20m.
func (x *MeasurementData20) Curvature() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.Curvature
}

// SV: Kantdjup. Enhet mm. Kantdjup avser att detektera skador närmast vägrenen. Mäts inte direkt av mätbil utan beräknas i efterbearbetning baserat på mätta 20m data om tvärprofil. (se VTI Rapport 718)
func (x *MeasurementData20) EdgeDepth() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.EdgeDepth
}

// SV: Megatextur höger. Enhet mm.
func (x *MeasurementData20) MegatextureRight() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.MegatextureRight
}

// SV: Megatextur vänster. Enhet mm.
func (x *MeasurementData20) MegatextureLeft() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.MegatextureLeft
}

// SV: MPD Makrotextur höger. Enhet mm. Makrotextur beräknad som MPD (Mean Profile Depth beräknat enligt ISO 13473-1), beskriver vägytans 'skrovlighet' i våglängdsintervallet 0,5-50 mm.
func (x *MeasurementData20) MPDMacrotextureRight() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.MPDMacrotextureRight
}

// SV: MPD Makrotextur mellan. Enhet mm. Makrotextur beräknad som MPD (Mean Profile Depth beräknat enligt ISO 13473-1), beskriver vägytans 'skrovlighet' i våglängdsintervallet 0,5-50 mm.
func (x *MeasurementData20) MPDMacrotextureMiddle() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.MPDMacrotextureMiddle
}

// SV: MPD Makrotextur vänster. Enhet mm. Makrotextur beräknad som MPD (Mean Profile Depth beräknat enligt ISO 13473-1), beskriver vägytans 'skrovlighet' i våglängdsintervallet 0,5-50 mm.
func (x *MeasurementData20) MPDMacrotextureLeft() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.MPDMacrotextureLeft
}

// SV: Spårarea. Enhet dm2. Mått för deformation i tvärled, komplement till spårdjup max. Mäts inte direkt av mätbil utan beräknas i efterbearbetning baserat på mätta 20m data om tvärprofil. (se VTI Rapport 718)
func (x *MeasurementData20) RutArea() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.RutArea
}

// SV: Spårbottenavstånd. Enhet mm. Avstånd mellan de djupaste spåren i vänster resp höger del av tvärprofilen. Mäts inte direkt av mätbil utan beräknas i efterbearbetning baserat på mätta 20m data om tvärprofil. (se VTI Rapport 718)
func (x *MeasurementData20) RutBottomDistance() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.RutBottomDistance
}

// SV: Spårbredd höger. Enhet mm. Höger hjulspårs bredd. Mäts inte direkt av mätbil utan beräknas i efterbearbetning baserat på mätta 20m data om tvärprofil. (se VTI Rapport 718)
func (x *MeasurementData20) RutWidthRight() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.RutWidthRight
}

// SV: Spårbredd vänster. Enhet mm. Vänster hjulspårs bredd. Mäts inte direkt av mätbil utan beräknas i efterbearbetning baserat på mätta 20m data om tvärprofil. (se VTI Rapport 718)
func (x *MeasurementData20) RutWidthLeft() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.RutWidthLeft
}

// SV: Spårdjup höger15. Enhet mm. 15 lasrar.
func (x *MeasurementData20) RutDepthRight15() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.RutDepthRight15
}

// SV: Spårdjup höger17. Enhet mm. 17 lasrar.
func (x *MeasurementData20) RutDepthRight17() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.RutDepthRight17
}

// SV: Spårdjup max15. Maxvärde 15 lasrar.
func (x *MeasurementData20) RutDepthMax15() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.RutDepthMax15
}

// SV: Spårdjup max17. Maxvärde 17 lasrar.
func (x *MeasurementData20) RutDepthMax17() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.RutDepthMax17
}

// SV: Spårdjup vänster17. Enhet mm. 17 lasrar.
func (x *MeasurementData20) RutDepthLeft17() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.RutDepthLeft17
}

// SV: Spårbottentvärfall. Enhet %.
func (x *MeasurementData20) CrossfallRutBottom() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.CrossfallRutBottom
}

// SV: Vattenarea. Enhet dm2. Mått för deformation i tvärled, komplement till spårdjup max. Mäts inte direkt av mätbil utan beräknas i efterbearbetning baserat på mätta 20m data om tvärprofil. (se VTI Rapport 718)
func (x *MeasurementData20) WaterArea() *float64 {
	if x.data == nil {
		return nil
	}
	return x.data.WaterArea
}

// SV: Datum för när mätdata hämtades ut från källsystemen.
func (x *MeasurementData20) TimeStamp() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.TimeStamp
}

// EN: Specifies when the object is stored.
// SV: Anger när objektet är sparat.
func (x *MeasurementData20) ModifiedTime() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.ModifiedTime
}

// EN: Specifies if the object is deleted.
// SV: Anger om objektet är raderat.
func (x *MeasurementData20) Deleted() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.Deleted
}

type Direction struct {
	data *schema.Direction
}

func (x *Direction) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Direction{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Riktning. Värde.
func (x *Direction) Code() *int {
	if x.data == nil {
		return nil
	}
	return x.data.Code
}

// SV: Riktning. Beskrivning.
func (x *Direction) Value() *string {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type MeasurementDataType struct {
	data *schema.MeasurementDataType
}

func (x *MeasurementDataType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.MeasurementDataType{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Mätdatatyp. Värde.
func (x *MeasurementDataType) Code() *int {
	if x.data == nil {
		return nil
	}
	return x.data.Code
}

// SV: Mätdatatyp. Beskrivning.
func (x *MeasurementDataType) Value() *string {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

// Response can be used to decode the response from the API.
//
// For example:
//
//	package main
//
//	import (
//		 "encoding/xml"
//		 api "github.com/phille97/trafikinfo/trv/measurementdata20/v1"
//	)
//
//	func main() {
//		var res api.Response
//		err := xml.Unmarshal(data, &res)
//	}
type Response struct {
	XMLName xml.Name `xml:"RESPONSE"`
	Results []struct {
		Info struct {
			LastModified trv.LastModified `xml:"LASTMODIFIED"`
			LastChangeID string           `xml:"LASTCHANGEID"`
			EvalResult   []any            `xml:"EVALRESULT"`
			SSEURL       string           `xml:"SSEURL"`
		} `xml:"INFO"`
		Error *trv.APIError       `xml:"ERROR"`
		Data  []MeasurementData20 `xml:"MeasurementData20"`
	} `xml:"RESULT"`
}

// HasErrors returns whether any of the results
// includes an error.
func (r Response) HasErrors() bool {
	if len(r.Results) == 0 {
		return false
	}

	res := false
	for _, rr := range r.Results {
		if rr.Error != nil {
			res = true
			break
		}
	}
	return res
}

// Errors returns a slice of [trv.Error], if any error was
// included in the response.
func (r Response) ErrorMsg() string {
	if !r.HasErrors() {
		return ""
	}

	res := []string{}
	for _, rr := range r.Results {
		if rr.Error != nil {
			res = append(res, rr.Error.Error())
		}
	}
	return strings.Join(res, ", ")
}
