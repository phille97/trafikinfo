// Package v1 contains the type definitions for RoadGeometry v1.
//
// All types have accessor methods to access fields which can be chained on nils.
// This makes it possible to easily drill down into deeply nested data.
package v1

import (
	"encoding/xml"
	"strings"
	"time"

	schema "github.com/phille97/trafikinfo/internal/trv/roadgeometry/v1"
	"github.com/phille97/trafikinfo/trv"
)

// THIS FILE IS AUTOMATICALLY GENERATED FROM THE XSD. DO NOT EDIT.

func T() trv.ObjectType {
	return trv.ObjectType{
		Kind:      "RoadGeometry",
		Version:   "1",
		Namespace: "",
	}
}

type RoadGeometry struct {
	data *schema.RoadGeometry
}

func (x *RoadGeometry) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.RoadGeometry{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Län.
func (x *RoadGeometry) County() *int {
	if x.data == nil {
		return nil
	}
	return x.data.County
}

// SV: Huvudvägnummer.
func (x *RoadGeometry) RoadMainNumber() *int {
	if x.data == nil {
		return nil
	}
	return x.data.RoadMainNumber
}

// SV: Undervägnummer. Kallas ibland även punktväg. Måste användas ihop med huvudvägnumret.
func (x *RoadGeometry) RoadSubNumber() *int {
	if x.data == nil {
		return nil
	}
	return x.data.RoadSubNumber
}

func (x *RoadGeometry) Direction() *Direction {
	if x.data == nil {
		return &Direction{}
	}
	return &Direction{data: x.data.Direction}
}

// SV: Längd.
func (x *RoadGeometry) Length() *int {
	if x.data == nil {
		return nil
	}
	return x.data.Length
}

func (x *RoadGeometry) Geometry() *Geometry {
	if x.data == nil {
		return &Geometry{}
	}
	return &Geometry{data: x.data.Geometry}
}

// SV: Datum för när vägdata hämtades ut från källsystemen.
func (x *RoadGeometry) TimeStamp() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.TimeStamp
}

// EN: Specifies when the object is stored.
// SV: Anger när objektet är sparat.
func (x *RoadGeometry) ModifiedTime() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.ModifiedTime
}

// EN: Specifies if the object is deleted.
// SV: Anger om objektet är raderat.
func (x *RoadGeometry) Deleted() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.Deleted
}

type Direction struct {
	data *schema.Direction
}

func (x *Direction) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Direction{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Riktning. Värde.
func (x *Direction) Code() *int {
	if x.data == nil {
		return nil
	}
	return x.data.Code
}

// SV: Riktning. Beskrivning.
func (x *Direction) Value() *string {
	if x.data == nil {
		return nil
	}
	return x.data.Value
}

type Geometry struct {
	data *schema.Geometry
}

func (x *Geometry) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Geometry{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Geometrisk punkt i koordinatsystem SWEREF99TM
func (x *Geometry) SWEREF99TM3D() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SWEREF99TM3D
}

// SV: Geometrisk punkt i koordinatsystem WGS84
func (x *Geometry) WGS843D() *string {
	if x.data == nil {
		return nil
	}
	return x.data.WGS843D
}

// Response can be used to decode the response from the API.
//
// For example:
//
//	package main
//
//	import (
//		 "encoding/xml"
//		 api "github.com/phille97/trafikinfo/trv/roadgeometry/v1"
//	)
//
//	func main() {
//		var res api.Response
//		err := xml.Unmarshal(data, &res)
//	}
type Response struct {
	XMLName xml.Name `xml:"RESPONSE"`
	Results []struct {
		Info struct {
			LastModified trv.LastModified `xml:"LASTMODIFIED"`
			LastChangeID string           `xml:"LASTCHANGEID"`
			EvalResult   []any            `xml:"EVALRESULT"`
			SSEURL       string           `xml:"SSEURL"`
		} `xml:"INFO"`
		Error *trv.APIError  `xml:"ERROR"`
		Data  []RoadGeometry `xml:"RoadGeometry"`
	} `xml:"RESULT"`
}

// HasErrors returns whether any of the results
// includes an error.
func (r Response) HasErrors() bool {
	if len(r.Results) == 0 {
		return false
	}

	res := false
	for _, rr := range r.Results {
		if rr.Error != nil {
			res = true
			break
		}
	}
	return res
}

// Errors returns a slice of [trv.Error], if any error was
// included in the response.
func (r Response) ErrorMsg() string {
	if !r.HasErrors() {
		return ""
	}

	res := []string{}
	for _, rr := range r.Results {
		if rr.Error != nil {
			res = append(res, rr.Error.Error())
		}
	}
	return strings.Join(res, ", ")
}
