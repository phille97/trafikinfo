// Package v1dot7 contains the type definitions for TrainMessage v1.7.
//
// All types have accessor methods to access fields which can be chained on nils.
// This makes it possible to easily drill down into deeply nested data.
package v1dot7

import (
	"encoding/xml"
	"strings"
	"time"

	schema "github.com/phille97/trafikinfo/internal/trv/trainmessage/v1dot7"
	"github.com/phille97/trafikinfo/trv"
)

// THIS FILE IS AUTOMATICALLY GENERATED FROM THE XSD. DO NOT EDIT.

func T() trv.ObjectType {
	return trv.ObjectType{
		Kind:      "TrainMessage",
		Version:   "1.7",
		Namespace: "",
	}
}

type TrainMessage struct {
	data *schema.TrainMessage
}

func (x *TrainMessage) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.TrainMessage{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: <div class="toggleTitle">Länsnummer</div> <div class="toggle arrowR"> </div> <div class="toggleContent"> <table class="table table-condensed"> <tr> <td>1</td> <td>Stockholms län</td> </tr> <tr> <td>2</td> <td> DEPRECATED<br /> Användes tidigare för Stockholms län </td> </tr> <tr> <td>3</td> <td>Uppsala län</td> </tr> <tr> <td>4</td> <td>Södermanlands län</td> </tr> <tr> <td>5</td> <td>Östergötlands län</td> </tr> <tr> <td>6</td> <td>Jönköpings län</td> </tr> <tr> <td>7</td> <td>Kronobergs län</td> </tr> <tr> <td>8</td> <td>Kalmar län</td> </tr> <tr> <td>9</td> <td>Gotlands län</td> </tr> <tr> <td>10</td> <td>Blekinge län</td> </tr> <tr> <td>12</td> <td>Skåne län</td> </tr> <tr> <td>13</td> <td>Hallands län</td> </tr> <tr> <td>14</td> <td>Västra Götalands län</td> </tr> <tr> <td>17</td> <td>Värmlands län</td> </tr> <tr> <td>18</td> <td>Örebro län</td> </tr> <tr> <td>19</td> <td>Västmanlands län</td> </tr> <tr> <td>20</td> <td>Dalarnas län</td> </tr> <tr> <td>21</td> <td>Gävleborgs län</td> </tr> <tr> <td>22</td> <td>Västernorrlands län</td> </tr> <tr> <td>23</td> <td>Jämtlands län</td> </tr> <tr> <td>24</td> <td>Västerbottens län</td> </tr> <tr> <td>25</td> <td>Norrbottens län</td> </tr> </table> </div>
func (x *TrainMessage) Counties() []int {
	if x.data == nil {
		return nil
	}
	return x.data.CountyNo
}

// SV: Anger att dataposten raderats
func (x *TrainMessage) Deleted() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.Deleted
}

// SV: Informationstext
func (x *TrainMessage) ExternalDescription() *string {
	if x.data == nil {
		return nil
	}
	return x.data.ExternalDescription
}

func (x *TrainMessage) Geometry() *Geometry {
	if x.data == nil {
		return &Geometry{}
	}
	return &Geometry{data: x.data.Geometry}
}

// SV: Unikt id för händelsen
func (x *TrainMessage) EventID() *string {
	if x.data == nil {
		return nil
	}
	return x.data.EventId
}

// SV: Redaktörssatt rubrik för händelsen, kan i vissa fall vara samma som ReasonCodeText
func (x *TrainMessage) Header() *string {
	if x.data == nil {
		return nil
	}
	return x.data.Header
}

func (x *TrainMessage) ReasonCodes() []ReasonCode {
	if len(x.data.ReasonCode) == 0 {
		return nil
	}
	data := []ReasonCode{}
	for _, mem := range x.data.ReasonCode {
		data = append(data, ReasonCode{data: &mem})
	}
	return data
}

// SV: Meddelandets trafikpåverkan
func (x *TrainMessage) TrafficImpact() []TrafficImpact {
	if len(x.data.TrafficImpact) == 0 {
		return nil
	}
	data := []TrafficImpact{}
	for _, mem := range x.data.TrafficImpact {
		data = append(data, TrafficImpact{data: &mem})
	}
	return data
}

// SV: Händelsens starttid
func (x *TrainMessage) StartDateTime() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.StartDateTime
}

// SV: Prognos för då händelsen inte längre väntas påverka trafiken
func (x *TrainMessage) PrognosticatedEndDateTimeTrafficImpact() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.PrognosticatedEndDateTimeTrafficImpact
}

// SV: Händelsens sluttid
func (x *TrainMessage) EndDateTime() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.EndDateTime
}

// SV: Tidpunkt då händelsen uppdaterades
func (x *TrainMessage) LastUpdateDateTime() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.LastUpdateDateTime
}

// SV: Tidpunkt då dataposten ändrades
func (x *TrainMessage) ModifiedTime() *time.Time {
	if x.data == nil {
		return nil
	}
	return x.data.ModifiedTime
}

type Geometry struct {
	data *schema.Geometry
}

func (x *Geometry) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.Geometry{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Geometrisk punkt i koordinatsystem SWEREF99TM
func (x *Geometry) SWEREF99TM() *string {
	if x.data == nil {
		return nil
	}
	return x.data.SWEREF99TM
}

// SV: Geometrisk punkt i koordinatsystem WGS84
func (x *Geometry) WGS84() *string {
	if x.data == nil {
		return nil
	}
	return x.data.WGS84
}

type ReasonCode struct {
	data *schema.ReasonCode
}

func (x *ReasonCode) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.ReasonCode{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Orsakskod
func (x *ReasonCode) Code() *string {
	if x.data == nil {
		return nil
	}
	return x.data.Code
}

// SV: Beskrivande text för orsakskod
func (x *ReasonCode) Description() *string {
	if x.data == nil {
		return nil
	}
	return x.data.Description
}

type TrafficImpact struct {
	data *schema.TrafficImpact
}

func (x *TrafficImpact) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.TrafficImpact{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Anger om trafikpåverkan är bekräftad. När påverkan inte är bekräftad anges alla platser på den aktuella sträckan som påverkade
func (x *TrafficImpact) IsConfirmed() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.IsConfirmed
}

// SV: Påverkad sträckas frånstation, för att avgöra om stationen är påverkad, se fältet AffectedLocation
func (x *TrafficImpact) FromLocations() []string {
	if x.data == nil {
		return nil
	}
	return x.data.FromLocation
}

// SV: Påverkade stationer
func (x *TrafficImpact) AffectedLocations() []AffectedLocation {
	if len(x.data.AffectedLocation) == 0 {
		return nil
	}
	data := []AffectedLocation{}
	for _, mem := range x.data.AffectedLocation {
		data = append(data, AffectedLocation{data: &mem})
	}
	return data
}

// SV: Påverkad sträckas tillstation, för att avgöra om stationen är påverkad, se fältet AffectedLocation
func (x *TrafficImpact) ToLocations() []string {
	if x.data == nil {
		return nil
	}
	return x.data.ToLocation
}

type AffectedLocation struct {
	data *schema.AffectedLocation
}

func (x *AffectedLocation) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	res := &schema.AffectedLocation{}
	if err := d.DecodeElement(res, &start); err != nil {
		return err
	}
	x.data = res
	return nil
}

// SV: Signatur för den påverkade platsen
func (x *AffectedLocation) LocationSignature() *string {
	if x.data == nil {
		return nil
	}
	return x.data.LocationSignature
}

// SV: Visar huruvida platsen ska ingå i trafikinformationen eller inte
// EN: Indicates if the location should be included in traffic information
func (x *AffectedLocation) ShouldBeTrafficInformed() *bool {
	if x.data == nil {
		return nil
	}
	return x.data.ShouldBeTrafficInformed
}

// Response can be used to decode the response from the API.
//
// For example:
//
//	package main
//
//	import (
//		 "encoding/xml"
//		 api "github.com/phille97/trafikinfo/trv/trainmessage/v1dot7"
//	)
//
//	func main() {
//		var res api.Response
//		err := xml.Unmarshal(data, &res)
//	}
type Response struct {
	XMLName xml.Name `xml:"RESPONSE"`
	Results []struct {
		Info struct {
			LastModified trv.LastModified `xml:"LASTMODIFIED"`
			LastChangeID string           `xml:"LASTCHANGEID"`
			EvalResult   []any            `xml:"EVALRESULT"`
			SSEURL       string           `xml:"SSEURL"`
		} `xml:"INFO"`
		Error *trv.APIError  `xml:"ERROR"`
		Data  []TrainMessage `xml:"TrainMessage"`
	} `xml:"RESULT"`
}

// HasErrors returns whether any of the results
// includes an error.
func (r Response) HasErrors() bool {
	if len(r.Results) == 0 {
		return false
	}

	res := false
	for _, rr := range r.Results {
		if rr.Error != nil {
			res = true
			break
		}
	}
	return res
}

// Errors returns a slice of [trv.Error], if any error was
// included in the response.
func (r Response) ErrorMsg() string {
	if !r.HasErrors() {
		return ""
	}

	res := []string{}
	for _, rr := range r.Results {
		if rr.Error != nil {
			res = append(res, rr.Error.Error())
		}
	}
	return strings.Join(res, ", ")
}
